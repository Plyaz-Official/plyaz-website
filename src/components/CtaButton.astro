---
// Type declarations
interface Props {
  label: string;
  type: "primary" | "secondary" | "ghost";
  className?: string;
  pathname?: string;
}

type TypeProp = Props['type'];

// Props
const { label, type, className, pathname } = Astro.props;

// Styles
const ghostStyle = "cursor-pointer inline-block py-4 px-6 text-base font-medium uppercase rounded-full bg-transparent hover:bg-background hover:text-primary-foreground transition duration-300 ease-in-out";
const defaultStyle = `cta-hover cursor-pointer inline-block rounded-full py-4 px-6 text-base font-medium uppercase`;
const primaryStyle = "bg-secondary text-foreground";
const secondaryStyle = "bg-background text-primary-foreground";
const isGhost = type === 'ghost';

function getTypeExtendedStyle(type: TypeProp) {
  if (type === 'primary') {
    return primaryStyle;
  } else if (type === 'secondary') {
    return secondaryStyle;    
  } else {
    return ghostStyle; 
  }
}
---

<button
  data-name="cta"
  data-pathname={pathname}
  class={`${isGhost ? ghostStyle : defaultStyle} ${getTypeExtendedStyle(type)} ${className}`}
>
  <span class="label">
    {label}
  </span>
</button>

<script>
const buttons = document.querySelectorAll('[data-name="cta"]');

buttons.forEach(button => {
  button.addEventListener('click', () => {
    const pathname = button.getAttribute('data-pathname');

    if (!pathname) {
      console.error('Oops! Missing pathname');
      return
    };

    window.location.href = pathname;
  });
});
</script>